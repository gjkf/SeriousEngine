import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

group 'io.github.gjkf'
version '0.6'

project.ext.group = 'io.github.gjkf'
project.ext.artifactId = 'seriousEngine'
project.ext.version = '0.6'

apply plugin: 'java'
apply plugin: 'application'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

project.ext.lwjglVersion = "3.1.1"
mainClassName = "com.gjkf.seriousEngine.test.Main"

repositories {
    mavenCentral()
    mavenLocal()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

dependencies {
    // LWJGL dependencies START
    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"
    // LWJGL natives
    runtime "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:${lwjglNatives}"
    runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:${lwjglNatives}"
    // LWJGL dependencies END
    compile "org.joml:joml:1.9.0"
    compile "org.l33tlabs.twl:pngdecoder:1.0"
}

//// BUILDING /////

// add source jar
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// deobf jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// javadoc jars
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
}

// make sure all of these happen when we run build
build.dependsOn sourcesJar, deobfJar, javadocJar