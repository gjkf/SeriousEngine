/*
 * Created by Davide Cossu (gjkf), 7/23/2016
 */
package com.gjkf.seriousEngine.core.util;

import com.gjkf.seriousEngine.SeriousEngine;
import org.lwjgl.BufferUtils;

import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;

public class FileUtil{

    /**
     *
     *  Reads the file line by line and returns the content
     *
     *  @param path The path of the file
     *
     *  @return The contents of the file
     */

    public static String readFile(String path){
        StringBuilder builder = new StringBuilder();

        try (InputStream in = new FileInputStream(path);
             BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line).append("\n");
            }
        } catch (IOException ex) {
            throw new RuntimeException("Failed to load a file!"
                    + System.lineSeparator() + ex.getMessage());
        }

        return builder.toString();
    }

    /**
     *  Gets the file given a local path
     *  <p>
     *  The basic one is {@code <RunningDirectory>/resources/}
     *
     *  @param path The path of the file
     *
     *  @return The file location
     */

    public static String loadResource(String path){
       String s;
        try{
            s =  SeriousEngine.runningDirectory.getResource(path).getFile();
        }catch(NullPointerException e){
            e.printStackTrace();
            s = "null";
        }
        return s;
    }

    /**
     *  Gets the resource as a ByteBuffer
     *
     *  @param resource The resource
     *  @param bufferSize The size of the buffer
     *
     *  @return The newly generated ByteBuffer
     *
     *  @throws IOException In case anything wrong happened
     */

    public static ByteBuffer ioResourceToByteBuffer(String resource, int bufferSize) throws IOException{
        ByteBuffer buffer;

        File file = new File(resource);
        if(file.isFile()){
            FileChannel fc = new FileInputStream(file).getChannel();

            buffer = BufferUtils.createByteBuffer((int)fc.size() + 1);

            fc.close();
        }else{
            buffer = BufferUtils.createByteBuffer(bufferSize);

            InputStream source = SeriousEngine.runningDirectory.getResourceAsStream(resource);
            if(source == null)
                throw new FileNotFoundException(resource);

            try{
                try(ReadableByteChannel rbc = Channels.newChannel(source)){
                    while(true){
                        int bytes = rbc.read(buffer);
                        if(bytes == -1)
                            break;
                        if(buffer.remaining() == 0)
                            buffer = resizeBuffer(buffer, buffer.capacity() * 2);
                    }
                }
            }finally{
                source.close();
            }
        }

        buffer.flip();
        return buffer;
    }

    public static ByteBuffer resizeBuffer(ByteBuffer buffer, int cap){
        ByteBuffer newBuffer = BufferUtils.createByteBuffer(cap);
        buffer.flip();
        newBuffer.put(buffer);
        return newBuffer;
    }

}
